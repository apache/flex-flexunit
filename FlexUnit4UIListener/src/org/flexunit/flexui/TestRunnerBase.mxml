<?xml version="1.0" encoding="utf-8"?>
<!--
   Copyright (c) 2008. Adobe Systems Incorporated.
   All rights reserved.

   Redistribution and use in source and binary forms, with or without
   modification, are permitted provided that the following conditions are met:

     * Redistributions of source code must retain the above copyright notice,
       this list of conditions and the following disclaimer.
     * Redistributions in binary form must reproduce the above copyright notice,
       this list of conditions and the following disclaimer in the documentation
       and/or other materials provided with the distribution.
     * Neither the name of Adobe Systems Incorporated nor the names of its
       contributors may be used to endorse or promote products derived from this
       software without specific prior written permission.

   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   POSSIBILITY OF SUCH DAMAGE.
-->
<mx:Panel
   xmlns:mx="http://www.adobe.com/2006/mxml"
   xmlns="*"
   xmlns:data="org.flexunit.flexui.data.*"
   xmlns:controls="org.flexunit.flexui.controls.*"
   styleName="mainPanel"
   width="100%"
   height="100%"
   minHeight="500"
   minWidth="850"
   verticalScrollPolicy="off"
   horizontalScrollPolicy="off"
   modalTransparencyBlur="0"
   modalTransparency="0"
   implements="org.flexunit.runner.notification.ITemporalRunListener"
   creationComplete="handleCreationComplete()" >

   <mx:Metadata>
      [Event( name="testsComplete", type="org.flexunit.flexui.event.TestsCompleteEvent")]
   </mx:Metadata>
	<mx:Style>
		/* Class-selectors are the only way to apply styles to components */
		.flexUnitApplication {
			backgroundColor: #3872b2;
			backgroundGradientColors: #3872b2, #0c1a3d;
			backgroundGradientAlphas: 1, 1;
			themeColor: #ffffff;
			color: #444444;
			fontSize: 12;
			verticalScrollBarStyleName: flexUnitScrollBar;
			horizontalScrollBarStyleName: flexUnitScrollBar;
			modal-transparency-blur: 0;
			modal-transparency: 0;   
		}
		
		.myToolTip {
			background-color: #3872b2;
			leading: 5;
		}
		
		.flexUnitVBox {
			verticalScrollBarStyleName: flexUnitScrollBar;
			horizontalScrollBarStyleName: flexUnitScrollBar;
		}
		
		.flexUnitScrollBar
		{
			downArrowDisabledSkin: Embed(source="/skins/VScrollBar_downArrowDisabledSkin.png");
			downArrowDownSkin: Embed(source="/skins/VScrollBar_downArrowDownSkin.png");
			downArrowOverSkin: Embed(source="/skins/VScrollBar_downArrowOverSkin.png");
			downArrowUpSkin: Embed(source="/skins/VScrollBar_downArrowUpSkin.png");
			thumbIcon: Embed(source="/skins/VScrollBar_thumbIcon.png");
			trackSkin: Embed(source="/skins/VScrollBar_trackSkin.png");
			upArrowDisabledSkin: Embed(source="/skins/VScrollBar_upArrowDisabledSkin.png");
			upArrowDownSkin: Embed(source="/skins/VScrollBar_upArrowDownSkin.png");
			upArrowOverSkin: Embed(source="/skins/VScrollBar_upArrowOverSkin.png");
			upArrowUpSkin: Embed(source="/skins/VScrollBar_upArrowUpSkin.png");
			thumbDownSkin: Embed(
				source="/skins/VScrollBar_thumbDownSkin.png",
				scaleGridLeft="1", scaleGridTop="5", 
				scaleGridRight="8", scaleGridBottom="44" );
			thumbOverSkin: Embed(
				source="/skins/VScrollBar_thumbOverSkin.png",
				scaleGridLeft="1", scaleGridTop="5", 
				scaleGridRight="8", scaleGridBottom="44" );
			thumbUpSkin: Embed(
				source="/skins/VScrollBar_thumbUpSkin.png",
				scaleGridLeft="1", scaleGridTop="5", 
				scaleGridRight="8", scaleGridBottom="44" );
		}
		
		.flexUnitDataGrid {
			alternatingItemColors: #ffffff, #f6f6f6;
			headerColors: #fcfcfc, #e5e5e5;
			verticalGridLineColor: #dcdcdc;
			useRollOver: false;
			rollOverColor: #cccccc;
			selectionColor: #2863b4;
			textSelectedColor: #ffffff;
		}
		
		.flexUnitSlider {
			themeColor: #2863b4;
		}
		
		.flexUnitTree {
			alternatingItemColors: #ffffff, #f6f6f6;
			headerColors: #fcfcfc, #e5e5e5;
			verticalGridLineColor: #dcdcdc;
			useRollOver: false;
			rollOverColor: #cccccc;
			selectionColor: #2863b4;
			textSelectedColor: #ffffff;
			verticalScrollBarStyleName: flexUnitScrollBar;
			horizontalScrollBarStyleName: flexUnitScrollBar;
		}
		
		.mainPanel {
			header-height: 0;
			vertical-gap: 2;
			borderSkin: Embed( 
				source="/skins/Panel_borderSkin.png", 
				scaleGridLeft="12", scaleGridTop="31", 
				scaleGridRight="265", scaleGridBottom="189" );	
			padding-top: 20;
			padding-left: 8;
			padding-right: 8;
		}
		
		.flexUnitTextInput {
			themeColor: #ffffff;
		}
		
		.flexUnitTextAreaWithBorder {
			borderSkin: Embed(
				source="/skins/TextArea_borderSkin.png",
				scaleGridLeft="4", scaleGridTop="4", 
				scaleGridRight="150", scaleGridBottom="18" );
			paddingTop: 10;
			leading: 0;
			fontSize: 11;
			wordWrap: false;
			verticalScrollBarStyleName: flexUnitScrollBar;
			horizontalScrollBarStyleName: flexUnitScrollBar;
		}
		
		.flexUnitTextArea {
			borderStyle: none;
			backgroundAlpha: 0;
			paddingTop: 10;
			leading: 0;
			fontSize: 11;
			wordWrap: false;
			verticalScrollBarStyleName: flexUnitScrollBar;
			horizontalScrollBarStyleName: flexUnitScrollBar;
		}
		
		.panelTitleStyle {
			fontSize: 24;
			textIndent: 20;
		}
		
		.panelTitleSubStyle {
			fontSize: 16;
		}
		
		.flexUnitHRule {
			strokeColor: #b9b9b9;
			strokeWidth: 2;
			shadowColor: #FFFFFF; 
		}
		
		.h1 {
			fontSize: 18;
		}
		
		.h2 {
			fontSize: 13;
		}
		
		.flexUnitComboBox {
			upSkin: Embed(
				source="/skins/ComboBox_upSkin.png",
				scaleGridLeft="4", scaleGridTop="4", 
				scaleGridRight="64", scaleGridBottom="18" );
			overSkin: Embed(
				source="/skins/ComboBox_overSkin.png",
				scaleGridLeft="4", scaleGridTop="4", 
				scaleGridRight="64", scaleGridBottom="18" );
			downSkin: Embed(
				source="/skins/ComboBox_downSkin.png",
				scaleGridLeft="4", scaleGridTop="4", 
				scaleGridRight="64", scaleGridBottom="18" );
			disabledSkin: Embed(
				source="/skins/ComboBox_disabledSkin.png",
				scaleGridLeft="4", scaleGridTop="4", 
				scaleGridRight="64", scaleGridBottom="18" );
			themeColor: #2863b4;
		}
		
		.flexUnitProgressBar
		{
			barColor: #51C148;
			trackSkin: Embed(
				source="/skins/ProgressBar_trackSkin.png",
				scaleGridLeft="1", scaleGridTop="0", 
				scaleGridRight="149", scaleGridBottom="3" );
			trackHeight: 11;
		}
		
		.flexUnitForm {
			paddingTop: 0;
			paddingBottom: 0;
			paddingLeft: 0;
			paddingRight: 0;
			verticalGap: -2;
		}
		
		.flexUnitFormItemLabel {
			color: #777777;
		}
		
		.flexUnitFormItemValue {
			color: #444444;
		}
		
		.flexUnitButtonBar
		{
			horizontalGap: -1;
			firstButtonStyleName: "firstButtonBarButton";
			lastButtonStyleName: "lastButtonBarButton";
		}
		
		.firstButtonBarButton
		{
			disabledSkin: Embed(
				source="/skins/ButtonBarFirstButton_disabledSkin.png",
				scaleGridLeft="6", scaleGridTop="6", 
				scaleGridRight="40", scaleGridBottom="16" );
			downSkin: Embed(
				source="/skins/ButtonBarFirstButton_downSkin.png",
				scaleGridLeft="6", scaleGridTop="6", 
				scaleGridRight="40", scaleGridBottom="16" );
			overSkin: Embed(
				source="/skins/ButtonBarFirstButton_overSkin.png",
				scaleGridLeft="6", scaleGridTop="6", 
				scaleGridRight="40", scaleGridBottom="16" );
			selectedDisabledSkin: Embed(
				source="/skins/ButtonBarFirstButton_selectedDisabledSkin.png",
				scaleGridLeft="6", scaleGridTop="6", 
				scaleGridRight="40", scaleGridBottom="16" );
			selectedDownSkin: Embed(
				source="/skins/ButtonBarFirstButton_downSkin.png",
				scaleGridLeft="6", scaleGridTop="6", 
				scaleGridRight="40", scaleGridBottom="16" );
			selectedOverSkin: Embed(
				source="/skins/ButtonBarFirstButton_overSkin.png",
				scaleGridLeft="6", scaleGridTop="6", 
				scaleGridRight="40", scaleGridBottom="16" );
			selectedUpSkin: Embed(
				source="/skins/ButtonBarFirstButton_selectedUpSkin.png",
				scaleGridLeft="6", scaleGridTop="6", 
				scaleGridRight="40", scaleGridBottom="16" );
			upSkin: Embed(
				source="/skins/ButtonBarFirstButton_upSkin.png",
				scaleGridLeft="6", scaleGridTop="6", 
				scaleGridRight="40", scaleGridBottom="16" );
		}
		
		.lastButtonBarButton
		{
			disabledSkin: Embed(
				source="/skins/ButtonBarLastButton_disabledSkin.png",
				scaleGridLeft="6", scaleGridTop="6", 
				scaleGridRight="40", scaleGridBottom="16" );
			downSkin: Embed(
				source="/skins/ButtonBarLastButton_downSkin.png",
				scaleGridLeft="6", scaleGridTop="6", 
				scaleGridRight="40", scaleGridBottom="16" );
			overSkin: Embed(
				source="/skins/ButtonBarLastButton_overSkin.png",
				scaleGridLeft="6", scaleGridTop="6", 
				scaleGridRight="40", scaleGridBottom="16" );
			selectedDisabledSkin: Embed(
				source="/skins/ButtonBarLastButton_disabledSkin.png",
				scaleGridLeft="6", scaleGridTop="6", 
				scaleGridRight="40", scaleGridBottom="16" );
			selectedDownSkin: Embed(
				source="/skins/ButtonBarLastButton_downSkin.png",
				scaleGridLeft="6", scaleGridTop="6", 
				scaleGridRight="40", scaleGridBottom="16" );
			selectedOverSkin: Embed(
				source="/skins/ButtonBarLastButton_overSkin.png",
				scaleGridLeft="6", scaleGridTop="6", 
				scaleGridRight="40", scaleGridBottom="16" );
			selectedUpSkin: Embed(
				source="/skins/ButtonBarLastButton_selectedUpSkin.png",
				scaleGridLeft="6", scaleGridTop="6", 
				scaleGridRight="40", scaleGridBottom="16" );
			upSkin: Embed(
				source="/skins/ButtonBarLastButton_upSkin.png",
				scaleGridLeft="6", scaleGridTop="6", 
				scaleGridRight="40", scaleGridBottom="16" );
		}
		
		.flexUnitControlBar {
			paddingTop: 5;
			paddingBottom: 2;
			paddingLeft: 4;
			paddingRight: 12;
			borderSkin: Embed(
				source="/skins/Panel_controlBarBackgroundSkin.png",
				scaleGridLeft="8", scaleGridTop="1", 
				scaleGridRight="270", scaleGridBottom="17" );
		}
	</mx:Style>
	   
   <mx:Script>
      <![CDATA[
		  import flash.net.navigateToURL;
		  
		  import mx.controls.ToolTip;
		  import mx.controls.listClasses.ListBase;
		  import mx.core.ScrollPolicy;
		  import mx.managers.ToolTipManager;
		  
		  import org.flexunit.Assert;
		  import flexunit.framework.Assert;
		  import org.flexunit.flexui.controls.FlexUnitLabels;
		  import org.flexunit.flexui.data.TestFunctionRowData;
		  import org.flexunit.flexui.event.TestsCompleteEvent;
		  import org.flexunit.runner.Description;
		  import org.flexunit.runner.Descriptor;
		  import org.flexunit.runner.FlexUnitCore;
		  import org.flexunit.runner.IDescription;
		  import org.flexunit.runner.Result;
		  import org.flexunit.runner.notification.Failure;

         public var test : *;// TODO: [XB] was  Test;
		
		
		/* JT 5/28/09 - added lastFailedTest to handle bugreport FXU-38, the testFinished method of this class
		*  mistakenly assumed that any test which finished was successful.  This is not the case, as failures and 
		*  successes are both valid cases for a finished test.  With this variable, we can now prevent counting
		*  finished failures as successes.
		*/
		private var lastFailedTest:IDescription;
         private function handleCreationComplete() : void
         {
            ToolTip.maxWidth = 900;
            rightHandSide.model = model;
            leftHandSide.model = model;

            model.filterSectionEnabled = false;
         }

         public function startTest() : void
         {
            // if( test != null )
            {
               // model.totalTests = test.countTestCases(); // TODO: [XB] reenable this

               model.launchTests();

               rightHandSide.launchTests();
               leftHandSide.launchTests();
            }
         }

         private function addTestToList(
                     description : IDescription,
                     failure : Failure = null,
                     ignored : Boolean = false,
					 assertionsMade: uint= 0 ) : void
         {
               var rowAdded : TestFunctionRowData;

               rowAdded = model.addTestRowToHierarchicalList( description, failure, ignored, lastRunTime, assertionsMade );
               
               leftHandSide.testCasesContainer.allTestsHierarchyTree.verticalScrollPosition 
                     = leftHandSide.testCasesContainer.allTestsHierarchyTree.maxVerticalScrollPosition;
               
               /*if( ! success )
               {
                  model.rowSelected = rowAdded;
//               }*/
         }

         //---------------------------------------------------------------------
         // IFlexWriter Methods
         //---------------------------------------------------------------------
		public function testRunStarted( description:IDescription ):void {
			model.totalTests = description.testCount;
			this.startTest();
		}
		
		public function testRunFinished( result:Result ):void {
			rightHandSide.onAllTestsEnd();
            leftHandSide.onAllTestsEnd();

            dispatchEvent( new TestsCompleteEvent() );
		}
		
		private var lastRunTime:Number = 0;
		public function testStarted( description:IDescription ):void {
		}
	
		public function testFinished( description:IDescription ):void {
			if( ! leftHandSide.testCasesContainer.allTestsHierarchyTree.selectable )
            {
               model.numTestsRun++;
               /* JT 5/28/09 - added this conditional to handle bugreport FXU-38, the testFinished method of 
               *  this class mistakenly assumed that any test which finished was successful.  This is not the 
               *  case, as failures and successes are both valid cases for a finished test.  
			   */
               if(!lastFailedTest || description.displayName != lastFailedTest.displayName){
				   var totalAssertions:uint = flexunit.framework.Assert.assetionsMade + org.flexunit.Assert.assertionsMade;
	               addTestToList( description, null, false, totalAssertions );
	           }

               rightHandSide.onTestEnd();
               
               //removed until we can make this work correctly across all cases
               rightHandSide.selectedTestCaseForm.assertionsPerTest.invalidateProperties();
            }
		}
	
		public function testFailure( failure:Failure ):void {
			/* JT 5/28/09 - added lastFailedTest to handle bugreport FXU-38, the testFinished method of this class
			*  mistakenly assumed that any test which finished was successful.  This is not the case, as failures and 
			*  successes are both valid cases for a finished test.  With this variable, we can now prevent counting
			*  finished failures as successes.
			*/
			lastFailedTest = failure.description;
			model.addFailure();

			var totalAssertions:uint = flexunit.framework.Assert.assetionsMade + org.flexunit.Assert.assertionsMade;
            addTestToList( failure.description, failure, false, totalAssertions );

            rightHandSide.selectedTestCaseViewStack.selectedIndex = 1;
		}
	
		public function testAssumptionFailure( failure:Failure ):void {
		}
	
		/**
		 * Called when a test will not be run, generally because a test method is annotated 
		 * with {@link org.junit.Ignore}.
		 * 
		 * @param description describes the test that will not be run
		 */
		public function testIgnored( description:IDescription ):void {
			model.addIgnore();

            addTestToList( description, null, true );
		}
		
		public function testTimed( description:IDescription, runTime:Number ):void {
			lastRunTime = runTime;
		}
		  
         /*
         public function onSuccess( test : Test ) : void
         {
            if( ! leftHandSide.testCasesContainer.allTestsHierarchyTree.selectable )
            {
               addTestToList( true, test );
            }
         }

         public function onError( test : Test, error : Error ) : void
         {
            model.addError();
            
            addTestToList( false, test, error );

            rightHandSide.selectedTestCaseViewStack.selectedIndex = 1;
         }

         public function onFailure(
                     test : Test,
                     error : AssertionFailedError ) : void
         {
            model.addFailure();

            addTestToList( false, test, error, true );

            rightHandSide.selectedTestCaseViewStack.selectedIndex = 1;
         }*/

         // To replace Binding MetaTag
         private function updateRowSummaryToDisplay() : void
         {
            rightHandSide.updateRowSummaryToDisplay();
            leftHandSide.updateScrollPosition();
         }

      ]]>
   </mx:Script>

   <data:TestRunnerBasePresentationModel
      id="model"
      rowSelectedChanged="updateRowSummaryToDisplay()"
      testSuiteRunDurationChanged="rightHandSide.updateRunDuration()"
      totalErrorsChanged="rightHandSide.updateTotalErrorUI()"
      totalFailuresChanged="rightHandSide.updateTotalFailureUI()"
	  totalIgnoredChanged="rightHandSide.updateTotalIgnoredUI()"
      progressChanged="rightHandSide.onTestEnd()"
      filterEnableChanged="leftHandSide.updateFilterSectionEnable()"
      filterChanged="leftHandSide.refreshTree()"
      />
   
   <mx:HBox
      verticalAlign="bottom"
      horizontalGap="0">

      <controls:Title
         text="{ FlexUnitLabels.FLEXUNIT } {FlexUnitCore.version} { FlexUnitLabels.RUNNER }"
         styleName="panelTitleStyle"
         width="275"
         />
      
      <controls:Title
         text="{ FlexUnitLabels.POWERED_BY_APACHE_FLEX }"
         styleName="panelTitleSubStyle"
         useHandCursor="true"
         buttonMode="true"
         mouseChildren= "false"
         click="navigateToURL( new URLRequest( 'http://flex.apache.org' ) )"
         />
      
   </mx:HBox>
      
   <mx:HRule
      styleName="flexUnitHRule"
      width="100%"
      />
   
   <mx:HDividedBox
      width="100%" height="100%"
      horizontalGap="30"
      paddingTop="5"
      paddingBottom="30"
      paddingLeft="25"
      paddingRight="25">
   
      <controls:LeftHandSide
         id="leftHandSide"
         />
      
      <controls:RightHandSide
         id="rightHandSide"
         />
   
   </mx:HDividedBox>
			  
</mx:Panel>
